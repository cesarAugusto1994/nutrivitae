Nutrium.functions = Nutrium.functions || {}, $.extend(Nutrium.functions, {
    toggleButtonLoading: function () {
        function e(e) {
            var t = $(e).siblings(".button-loading-template.hidden").clone().removeClass("hidden");
            return t.length ? t : n
        }

        function t(t, n) {
            var a = $(t), i = a.parent().find('button, input[type="submit"]');
            if (n) n = "boolean" == typeof n ? a.data("button-text") : n, a.html(n), i.filter("button").removeAttr("disabled"), i.filter('input[type="submit"]').removeClass("disabled"); else {
                i.filter("button").attr("disabled", "disabled"), i.filter('input[type="submit"]').addClass("disabled"), a.data("button-text", a.html());
                var o = e(a);
                a.is("input") ? a.replaceWith($('<div class="' + a.attr("class") + '"></div>').append(o)) : a.html(o)
            }
        }

        var n = $('<div class="la-ball-fall sweetalert-loading"><div></div><div></div><div></div></div>');
        return t
    }()
}), function () {
    function e() {
        var e = $("#widget-goals").data("partial-goals-view-url");
        RemotePartials.get({
            url: e,
            container: "#remote-fields-goals",
            partial: "professionals/goals/edit/index/fields"
        }).done(function () {
            t(), n(), a()
        })
    }

    function t() {
        var e = $("#widget-goals"), t = e.find(".goal").find(".deadline"), n = e.data("date-format");
        t.each(function (e, t) {
            $(t).html(moment($(t).data("date"), moment.ISO_8601).format(n))
        })
    }

    function n() {
        $("#widget-goals").find(".goal").find(".field-action").on("click", function (e) {
            e.preventDefault();
            var t = $(this).data("url");
            RemotePartials.patch({url: t}).done(function () {
                $("#widget-goals").trigger("nt.goals.reload.fields"), $("#wrapper").trigger("nt.reload.patient-status")
            })
        })
    }

    function a() {
        $("#remote-fields-goals").on("click", '[data-toggle="delete-goal-confirmation"]', function () {
            var e = $(this).closest(".widget").data("patient-id"), t = $(this).data("goal-id");
            swal({
                title: I18n.t("frontend.goals.delete.confirmation.title"),
                text: I18n.t("frontend.goals.delete.confirmation.description"),
                showCancelButton: !0,
                confirmButtonColor: Nutrium.colors.red,
                confirmButtonText: I18n.t("frontend.defaults.options.yes"),
                cancelButtonText: I18n.t("frontend.defaults.options.no")
            }, function () {
                InternalAPI.patients.goals.destroy(e, t).done(function () {
                    $("#remote-fields-goals").trigger("nt.goals.reload.fields"), $("#wrapper").trigger("nt.reload.patient-status")
                }).fail(function () {
                    swal(I18n.t("frontend.defaults.errors.message"), "", "error")
                })
            })
        })
    }

    $(document).ready(function () {
        e(), $("#widget-goals").on("nt.goals.reload.fields", e)
    })
}(), function () {
    function e() {
        t(), $("#goal_measurement_unit").on("change", function () {
            t()
        })
    }

    function t() {
        var e = $(".measurement-goal-form");
        n() ? e.find(".measurement-value-container").addClass("height-in-feet-and-inches") : e.find(".measurement-value-container").removeClass("height-in-feet-and-inches")
    }

    function n() {
        var e = $(".measurement-goal-form"), t = e.data("height-measurement-type-id"),
            n = parseInt(e.find("#goal_measurement_measurement_type_id").val()), a = e.data("foot-unit-of-measure-id"),
            i = parseInt(e.find("#goal_measurement_unit").val());
        return t == n && i == a
    }

    function a(e, t) {
        $(e).each(function (e, n) {
            $(n).prop("disabled", t)
        })
    }

    $(document).ready(function () {
        $("#widget-goals").find(".action-new-goal").off("click").on("click", function (e) {
            e.stopPropagation();
            var t = $("#widget-goals"), n = t.data("partial-goal-form-url");
            $(".new-goal.modal").modal("show"), RemotePartials.get({
                url: n,
                params: [{name: "appointment_id", value: t.data("appointment-id")}],
                container: "#new-goal-form-container",
                partial: "professionals/goals/new/form"
            }).done(function () {
                $(".new-goal.modal").trigger("nt.goal.form.ready")
            })
        }), $(".new-goal.modal").find(".action-create").off("click").on("click", function () {
            $(".new-goal.modal").find("form").submit()
        })
    }), $(".new-goal.modal").off("nt.goal.form.ready").on("nt.goal.form.ready", function () {
        $("[name='goal[goal_type]']").off("change").on("change", function () {
            var e = $(this).val(), t = $(this).closest("form"), n = t.find(".measurement-goal-form"),
                a = t.find("[name='goal[description]']");
            Enums.goalType.MEASURED == e ? (n.removeClass("hidden"), a.attr("placeholder", "")) : (n.addClass("hidden"), a.attr("placeholder", I18n.t("frontend.activerecord.placeholders.goal.description"))), t.find(".error").length && t.valid()
        }), $("[name='goal[measurement][measurement_type_id]']").off("change").on("change", function () {
            var t = $(this).val(), n = $(this).closest("form"), i = n.find("[name='goal[measurement][unit]']"),
                o = n.find("[name='goal[measurement][value]']"), d = n.find("[type='submit']");
            i.empty(), InternalAPI.measurement_types.unit_of_measures.index(t).done(function (t) {
                var n = t.data;
                $.isEmptyObject(n) ? a([i, o, d], !0) : (a([i, o, d], !1), $(n.units).each(function (e, t) {
                    var a = {value: t.id, text: t.attributes.name};
                    t.id == n.most_common_unit.id && (a.selected = "selected"), i.append($("<option>", a))
                }), e())
            }).fail(function () {
                a([i, o, d], !0)
            })
        }), $('[name="goal[measurement][measurement_type_id]"]').change(), $('[name="goal[deadline]"]').siblings(".input-group-addon").off("click").on("click", function () {
            $(this).siblings('[name="goal[deadline]"]').focus()
        }), $('[name="goal[deadline]"]').datetimepicker({
            locale: moment.locale(),
            format: "L",
            minDate: moment()
        }), $(".new-goal.modal").find("form").validate({
            rules: {
                "goal[goal_type]": "required",
                "goal[measurement][measurement_type_id]": "required",
                "goal[measurement][value]": {required: !0, min: 0, number: !0},
                "goal[measurement][unit]": "required",
                "goal[description]": {
                    required: function (e) {
                        var t = $(e).closest("form"), n = t.find("[name='goal[goal_type]']").val();
                        return Enums.goalType.GENERIC == n
                    }
                },
                "goal[deadline]": "required"
            }, errorPlacement: function (e, t) {
                t.parent(".input-group").length ? e.insertAfter(t.parent()) : e.insertAfter(t)
            }, submitHandler: function (e) {
                var t = new CloneForm($(e));
                RemotePartials.post({
                    url: $(e).attr("action"),
                    params: t.toIso8601().serializeArray()
                }).done(function () {
                    $("#widget-measurements").trigger("nt.measurements.reload.fields"), $("#widget-measurements").trigger("nt.measurements.reload.sidebar"), $("#remote-fields-goals").trigger("nt.goals.reload.fields"), $("#wrapper").trigger("nt.reload.patient-status")
                }), $(".new-goal.modal").modal("hide")
            }
        })
    })
}(), function () {
    $(document).ready(function () {
    })
}(), Nutrium.templates = Nutrium.templates || {}, Nutrium.templates.loading = Nutrium.templates.loading || {}, $.extend(Nutrium.templates.loading, function () {
    function e() {
        return $('<div class="sk-wave">              <div class="sk-rect sk-rect1"></div>       <div class="sk-rect sk-rect2"></div>       <div class="sk-rect sk-rect3"></div>       <div class="sk-rect sk-rect4"></div>       <div class="sk-rect sk-rect5"></div>     </div>')
    }

    function t() {
        return $("<i/>", {"class": "fa fa-spinner fa-pulse"})
    }

    function n() {
        return $('                          <div class="loading-dots">          <div class="dot"></div>           <div class="dot"></div>           <div class="dot"></div>         </div>                          ')
    }

    function a() {
        return $('                                         <div class="modal-loading-wave display-flex">                       <button class="close" data-dismiss="modal" type="button">           <span aria-hidden="true" style="color: black;">\xd7</span>           <span class="sr-only">Fechar</span>                             </button>                                                       </div>                                                          ').append(e())
    }

    return {wave: e, faSpinner: t, dots: n, modalLoadingWave: a}
}()), function () {
    function e() {
        $("#food-diary-widget").on("click", ".action-new-food-diary, .food-diary-open-action", function () {
            var e = I.data("current-food-diary-id"), a = $(this).data("food-diary-id");
            e != a ? (g(), $(this).hasClass("action-new-food-diary") ? t() : n(I.data("patient-id"), a), r(), o()) : e || (t(), r(), o()), I.modal("show")
        })
    }

    function t() {
        var e = I.find(".date").find(".field-content");
        I.data("mode", "create"), I.removeData("current-food-diary-id"), e.data("DateTimePicker").date(moment().startO("day"))
    }

    function n(e, t) {
        var n = Nutrium.templates.loading.modalLoadingWave();
        I.find(".modal-content").prepend(n), I.data("mode", "update"), InternalAPI.patients.food_diaries.show(e, t).done(h)
    }

    function a() {
        I.find(".date").find(".field-content").datetimepicker({locale: moment.locale(), format: "L", maxDate: moment()})
    }

    function i() {
        I.on("keydown", "textarea", u)
    }

    function o() {
        var e = "create" == I.data("mode") ? "new" : "edit",
            t = I18n.t("frontend.professionals.food_diaries.modal." + e + ".description");
        I.find(".modal-description").find(".description").text(t)
    }

    function d() {
        var e = $("#food-diary-widget").find(".page-navigation");
        e.removeClass("hidden"), e.find("a").on("click", function (e) {
            e.preventDefault(), RemotePartials.get($(e.target).closest("a").attr("href")).done(d)
        })
    }

    function r() {
        "create" == I.data("mode") ? I.find(".action-delete-food-diary").addClass("hidden") : I.find(".action-delete-food-diary").removeClass("hidden")
    }

    function s() {
        I.find(".action-delete-food-diary").not(".disabled").on("click", function () {
            swal({
                title: I18n.t("frontend.professionals.food_diaries.destroy.confirmation.title"),
                text: I18n.t("frontend.professionals.food_diaries.destroy.confirmation.description"),
                showCancelButton: !0,
                confirmButtonColor: Nutrium.colors.red,
                confirmButtonText: I18n.t("frontend.meal_plans.destroy.confirmation.confirm"),
                cancelButtonText: I18n.t("frontend.defaults.views.words.cancel")
            }, function () {
                var e = I.data("patient-id"), t = I.data("current-food-diary-id");
                InternalAPI.patients.food_diaries.destroy(e, t).done(m)
            })
        })
    }

    function l() {
        I.find(".save-food-diary").not(".disabled").on("click", function () {
            var e = f().format(), t = I.find(".observations").find("textarea").val(), n = v(),
                a = {date: e, observations: t, meals: n}, i = a.observations.trim().length, d = a.meals.length;
            if (i || d) {
                var s = $(this), l = I.data("patient-id"), u = "create" == I.data("mode");
                if (Nutrium.functions.toggleButtonLoading(s), u) var p = InternalAPI.patients.food_diaries.create(l, a); else var g = I.data("current-food-diary-id"),
                    p = InternalAPI.patients.food_diaries.update(l, g, a);
                p.done(function (e) {
                    I.data("current-food-diary-id", e.data.id), I.data("mode", "update"), r(), o(), m()
                }).always(function () {
                    Nutrium.functions.toggleButtonLoading(s, !0)
                })
            } else c()
        })
    }

    function f() {
        var e = I.find(".date").find(".field-content").data("DateTimePicker");
        return null == e.date() && e.date(moment().startOf("day")), e.date()
    }

    function c() {
        I.find(".error").removeClass("hidden")
    }

    function u() {
        I.find(".error").addClass("hidden")
    }

    function m() {
        var e = $("#food-diary-widget").find(".page-navigation").data("food-diary-url");
        RemotePartials.get(e).done(function () {
            d(), I.modal("hide")
        })
    }

    function v() {
        var e = [];
        return I.find(".meal-field").each(function () {
            var t = $(this).find(".field-textarea"), n = t.data("meal-type-id"), a = t.find("textarea").val(),
                i = {meal_type_id: n, text: a};
            a.trim().length && e.push(i)
        }), e
    }

    function p() {
        I.find("#meal_type_select").select2({
            placeholder: I18n.t("frontend.professionals.food_diaries.actions.add_meal.new"),
            dropdownCssClass: "field-editable field-dropdown meal-type-dropdown",
            formatNoMatches: function () {
                return I18n.t("frontend.defaults.errors.no_results")
            }
        }).change(function () {
            var e = $(this).find(":selected").text();
            y({
                meal_type_id: $(this).val(),
                meal_type: {attributes: {name: e}},
                text: ""
            }).find(".editable-textarea").click(), I.find("#meal_type_select").select2("val", null)
        }), I.find(".meal-picker").on("click", function () {
            I.find("#meal_type_select").select2("open")
        })
    }

    function g() {
        var e = I.find(".observations").find("textarea"), t = I.find(".food-diary-fields").find(".field-titled");
        I.find("#meal_type_select").select2("val", null), t.not(".observations, .date, .meal-picker").remove(), t.filter(".meal-picker").removeClass("hidden"), t.filter(".meal-picker").find("select").find("option").removeClass("hidden"), e.val(null), k(e), u()
    }

    function h(e) {
        var t = e.data.attributes, n = t.observations, a = t.date, i = t.meals,
            o = I.find(".observations").find("textarea");
        I.find(".date").find(".field-content").data("DateTimePicker").date(moment(a)), o.val(n), I.data("current-food-diary-id", e.data.id), I.find(".modal-loading-wave").remove(), k(o), i.forEach(function (e) {
            y(e.attributes)
        })
    }

    function b(e) {
        e.find(".field-action.action-cancel").on("click", function () {
            var e = $(this).parent(".field-editable").data("meal-type-id"), t = I.find(".meal-picker");
            t.find("select").find('option[value="' + e + '"]').removeClass("hidden"), t.removeClass("hidden"), $(this).closest(".meal-field").remove()
        })
    }

    function y(e) {
        var t = x(e), n = t.find("textarea"),
            a = !I.find(".observations").find(".field-content")[0].hasAttribute("readonly");
        return t.insertBefore(_()), w(e.meal_type_id), k(n), a ? b(t) : (n.attr("readonly", "readonly"), t.find(".field-action.action-cancel").addClass("hidden")), t
    }

    function w(e) {
        var t = I.find(".meal-picker").find("select");
        t.find('option[value="' + e + '"]').addClass("hidden"), t.find("option").not(".hidden").length - 1 || I.find(".meal-picker").addClass("hidden")
    }

    function _() {
        return I.find(".meal-picker").length ? I.find(".meal-picker") : I.find(".observations")
    }

    function k(e) {
        Nutrium.functions.textAreaAdjust({lineHeight: 18.5, minNumberOfRows: 2, shouldRemovePadding: !0, textarea: e})
    }

    function x(e) {
        var t = e.meal_type.attributes.name, n = e.meal_type_id, a = e.text;
        return $('                                                                                         <div class="field field-titled meal-field">                                                        <div class="field-title">' + t + '</div>                                                  <div class="field field-editable field-textarea" data-meal-type-id="' + n + '">           <textarea class="field-content">' + a + '</textarea>                                <div class="field-action text-muted action-cancel">                                                <i class="material-icons md-18">delete</i>                                                     </div>                                                                                         </div>                                                                                         </div>                                                                                         ')
    }

    var I;
    $(document).ready(function () {
        I = $("#food-diary-modal"), e(), d(), p(), l(), a(), s(), i()
    })
}(), function () {
    function e() {
        $("#eating-behaviour-widget").on("click", ".action-new-eating-behaviour, .eating-behaviour-open-action", function () {
            var e = h.data("current-eating-behaviour-id"), a = $(this).data("eating-behaviour-id");
            e != a ? (v(), $(this).hasClass("action-new-eating-behaviour") ? t() : n(h.data("patient-id"), a), c(), o()) : e || (t(), c(), o()), h.modal("show")
        })
    }

    function t() {
        var e = h.find(".date").find(".field-content");
        h.data("mode", "create"), h.removeData("current-eating-behaviour-id"), e.data("DateTimePicker").date(moment().startOf("day"))
    }

    function n(e, t) {
        var n = Nutrium.templates.loading.modalLoadingWave();
        h.find(".modal-content").prepend(n), h.data("mode", "update"), InternalAPI.patients.eating_behaviours.read(e, t).done(p)
    }

    function a() {
        h.find(".date").find(".field-content").datetimepicker({locale: moment.locale(), format: "L", maxDate: moment()})
    }

    function i() {
        h.on("keydown", "textarea", f)
    }

    function o() {
        var e = "create" == h.data("mode") ? "new" : "edit",
            t = I18n.t("frontend.professionals.eating_behaviours.modal." + e + ".description");
        h.find(".modal-description").find(".description").text(t)
    }

    function d() {
        var e = $("#eating-behaviours-container").find(".page-navigation");
        e.removeClass("hidden"), e.find("a").on("click", function (e) {
            e.preventDefault(), RemotePartials.get($(e.target).closest("a").attr("href")).done(d)
        })
    }

    function r() {
        h.find(".save-eating-behaviour").not(".disabled").on("click", function () {
            var e = s().format(), t = h.find(".observations").find("textarea").val();
            if (t.trim().length) {
                var n = $(this), a = h.data("patient-id"), i = "create" == h.data("mode"), d = {date: e, text: t};
                if (Nutrium.functions.toggleButtonLoading(n), i) var r = InternalAPI.patients.eating_behaviours.create(a, d); else var f = h.data("current-eating-behaviour-id"),
                    r = InternalAPI.patients.eating_behaviours.update(a, f, d);
                r.done(function (e) {
                    h.data("current-eating-behaviour-id", e.data.id), h.data("mode", "update"), c(), o(), m()
                }).always(function () {
                    Nutrium.functions.toggleButtonLoading(n, !0)
                })
            } else l()
        })
    }

    function s() {
        var e = h.find(".date").find(".field-content").data("DateTimePicker");
        return null == e.date() && e.date(moment().startOf("day")), e.date()
    }

    function l() {
        h.find(".error").removeClass("hidden")
    }

    function f() {
        h.find(".error").addClass("hidden")
    }

    function c() {
        "create" == h.data("mode") ? h.find(".action-delete-eating-behaviour").addClass("hidden") : h.find(".action-delete-eating-behaviour").removeClass("hidden")
    }

    function u() {
        h.find(".action-delete-eating-behaviour").not(".disabled").on("click", function () {
            swal({
                title: I18n.t("frontend.professionals.eating_behaviours.destroy.confirmation.title"),
                text: I18n.t("frontend.professionals.eating_behaviours.destroy.confirmation.description"),
                showCancelButton: !0,
                confirmButtonColor: Nutrium.colors.red,
                confirmButtonText: I18n.t("frontend.professionals.eating_behaviours.destroy.confirmation.confirm"),
                cancelButtonText: I18n.t("frontend.defaults.views.words.cancel")
            }, function () {
                var e = h.data("patient-id"), t = h.data("current-eating-behaviour-id");
                InternalAPI.patients.eating_behaviours.destroy(e, t).done(m)
            })
        })
    }

    function m() {
        var e = $("#eating-behaviour-widget").find(".page-navigation").data("eating-behaviour-url");
        RemotePartials.get(e).done(function () {
            d(), h.modal("hide")
        })
    }

    function v() {
        var e = h.find(".observations").find("textarea");
        e.val(null), g(e), f()
    }

    function p(e) {
        var t = e.data.attributes, n = h.find(".observations").find("textarea"),
            a = h.find(".date").find(".field-content").data("DateTimePicker");
        n.val(t.text), a.date(moment(t.date)), h.data("current-eating-behaviour-id", e.data.id), h.find(".modal-loading-wave").remove(), g(n)
    }

    function g(e) {
        Nutrium.functions.textAreaAdjust({lineHeight: 18.5, minNumberOfRows: 2, shouldRemovePadding: !0, textarea: e})
    }

    var h;
    $(document).ready(function () {
        h = $("#eating-behaviour-modal"), e(), d(), r(), a(), u(), i()
    })
}(), function () {
    function e() {
        $("#appointments-observation-widget").find(".patient-observation-open-action").on("click", function () {
            var e = $(this).closest(".widget").data("patient-id"), t = $(this).data("patient-observation-id");
            h.find("#patient-observation-form").data("mode", "update"), h.find(".modal-body").attr("data-patient-observation-id", t), h.modal("show"), h.find(".modal-description").find(".description-new").addClass("hidden"), h.find(".modal-description").find(".description-edit").removeClass("hidden"), u(), InternalAPI.patients.patient_observations.read(e, t).done(function (e) {
                p(e)
            })
        })
    }

    function t() {
        h.find(".date").find(".field-content").datetimepicker({locale: moment.locale(), format: "L", maxDate: moment()})
    }

    function n() {
        $("#appointments-observation-widget").find(".action-new-patient-observation").on("click", function () {
            var e = h.find(".date").find(".field-content"), t = moment().startOf("day");
            h.find("#patient-observation-form").data("mode", "create"), u(), h.find(".modal-description").find(".description-new").removeClass("hidden"), h.find(".modal-description").find(".description-edit").addClass("hidden"), h.modal("show"), e.data("DateTimePicker").date(t), g()
        })
    }

    function a() {
        h.on("hide.bs.modal", function () {
            var e = h.find(".observations").find("textarea");
            h.find("#patient-observation-loading").removeClass("hidden"), h.find("#patient-observation-form").addClass("hidden"), e.val(null), Nutrium.functions.textAreaAdjust({
                lineHeight: 18.5,
                minNumberOfRows: 5,
                textarea: e,
                shouldRemovePadding: !0
            }), c()
        })
    }

    function i() {
        h.on("keydown", "textarea", c)
    }

    function o() {
        h.modal("hide"), d()
    }

    function d() {
        e(), r()
    }

    function r() {
        var e = $("#patient-observations-container").find(".page-navigation");
        e.removeClass("hidden"), e.find("a").on("click", function (e) {
            e.preventDefault(), RemotePartials.get($(e.target).closest("a").attr("href")).done(d)
        })
    }

    function s() {
        h.find(".action-create").not(".disabled").on("click", function () {
            l();
            var e = h.find(".date").find(".field-content").data("DateTimePicker").date().format(),
                t = h.find(".observations").find("textarea").val();
            if (t.trim().length) {
                var n = $(this), a = n.html(), i = $("#appointments-observation-widget").data("patient-id"),
                    o = "create" == h.find("#patient-observation-form").data("mode"), d = {date: e, observations: t};
                if (Nutrium.functions.toggleButtonLoading(n), o) d = {
                    date: e,
                    observations: t,
                    patient_observation_type_id: Enums.patientObservationType.APPOINTMENTS
                }, $request = InternalAPI.patients.patient_observations.create(i, d); else {
                    var r = h.find(".modal-body").attr("data-patient-observation-id");
                    $request = InternalAPI.patients.patient_observations.update(i, r, d)
                }
                $request.done(v).always(function () {
                    Nutrium.functions.toggleButtonLoading(n, a)
                })
            } else f()
        })
    }

    function l() {
        var e = h.find(".date").find(".field-content").data("DateTimePicker");
        null == e.date() && e.date(moment().startOf("day"))
    }

    function f() {
        h.find(".error").removeClass("hidden")
    }

    function c() {
        h.find(".error").addClass("hidden")
    }

    function u() {
        var e = h.find(".action-delete");
        "create" == h.find("#patient-observation-form").data("mode") ? e.addClass("hidden") : e.removeClass("hidden")
    }

    function m() {
        h.find(".action-delete").not(".disabled").on("click", function () {
            swal({
                title: I18n.t("frontend.professionals.patient_observations.destroy.confirmation.title"),
                text: I18n.t("frontend.professionals.patient_observations.destroy.confirmation.description"),
                showCancelButton: !0,
                confirmButtonColor: Nutrium.colors.red,
                confirmButtonText: I18n.t("frontend.professionals.patient_observations.destroy.confirmation.confirm"),
                cancelButtonText: I18n.t("frontend.defaults.views.words.cancel"),
                closeOnConfirm: !0
            }, function () {
                var e = $("#appointments-observation-widget").data("patient-id"),
                    t = h.find(".modal-body").attr("data-patient-observation-id");
                InternalAPI.patients.patient_observations.destroy(e, t).done(v)
            })
        })
    }

    function v() {
        var e = $("#appointments-observation-widget").find(".page-navigation").data("patient-observation-url");
        RemotePartials.get(e).done(o)
    }

    function p(e) {
        var t = e.observations, n = e.date, a = h.find(".observations").find("textarea");
        h.find(".date").find(".field-content").data("DateTimePicker").date(moment(n)), a.val(t), g(), Nutrium.functions.textAreaAdjust({
            lineHeight: 18.5,
            minNumberOfRows: 5,
            textarea: a,
            shouldRemovePadding: !0
        })
    }

    function g() {
        h.find("#patient-observation-loading").addClass("hidden"), h.find("#patient-observation-form").removeClass("hidden")
    }

    var h;
    $(document).ready(function () {
        h = $("#patient-observation-modal"), e(), r(), n(), a(), s(), t(), m(), i()
    })
}();